# ============================================================================
# INCORE SEMICONDUCTORS PVT. LTD. Confidential
# Copyright (c) 2022-2023, INCORE SEMICONDUCTORS PVT. LTD.
# Project Name: Azurite 
# Project URL : https://gitlab.incoresemi.com/core-generators/azurite
# ============================================================================
#
# In the following text COMPANY refers to INCORE SEMICONDUCTORS PVT. LTD.
#
# The information contained herein is the proprietary and confidential 
# information of COMPANY or its licensors, and is supplied subject to, and may 
# be used only in accordance with, previously executed agreements with incore.        
#
# Except as may otherwise be agreed in writing: 
#
# (1) All materials furnished by COMPANY hereunder are provided "as is" 
#     without warranty of any kind. 
# (2) COMPANY specifically disclaims any warranty  relating to  fitness for a
#     particular purpose or merchantability or infringement of any patent, 
#     copyright or other intellectual property right. and 
# (3) COMPANY will not be liable for any costs of procurement of substitutes, 
#     loss of profits, interruption of business, or for any other special, 
#     consequential or incidental damages, however caused, whether for breach 
#     of warranty, contract, tort, negligence, strict liability or otherwise.
# ============================================================================

cycles:
  # start_cycles: 100
  instructions_cycles:
    {add: 
      {latency : 1,
      throughput : 1},
    sub:
      {latency : 1,
      throughput : 1},
    mul:  
      {latency : 2,
      throughput : 1},
    div:
      {latency : 34,
      throughput : 34},
    rem:
      {latency : 34,
      throughput : 34},
    csr:
      {latency : 1,
      throughput : 1},
    s(a-z)l*:
      {latency : 1,
      throughput : 1},
    s(a-z)r*:
      {latency : 1,
      throughput : 1},
    j:
      {latency : 1,
      throughput : 1},
    c.:
      {latency : 1,
      throughput : 1}
      }
  flush_cycles:
    csr: 2 # pipeline_depth - 1 and 1 for csr # check once
    branch: 0
    fence.i: 2
  reset_cycles: 108
  pipeline_depth: 2
  bus_latency: # this is inaccurate
    data: 10
    instruction: 10
  bypass_latency: 1
  structural_hazards:
    data_cache: 1
    bus: 8 # bus capacity in terms of words
  # replacemnt_latency: 257
  mem_latency:
    cacheable:
      data:
        hit: 1
        miss: 10 # 2 #bus_latency, critical word first #10
      instruction:
        hit: 1
        miss: 18 # 2 #bus_latency + (size of cache line in bytes /4) eg: 10 + (32/4) = 18
    non_cacheable:
      data:
        miss: 10 #bus_latency 
      instruction:
        miss: 11 #bus_latency 
    


